version: '3.8'

services:
  # Serviço de API FastAPI (Produção)
  api:
    build:
      context: .
      dockerfile: Dockerfile
    image: habitus-forecast-api-prod
    restart: always
    # user: "${UID_GID}" # Descomente e defina UID_GID no .env.prod se houver problemas de permissão de volume
    ports:
      - "8000:8000"
    env_file:
      - .env.prod
    environment:
      - MONGODB_URI=mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongo:27017/habitus-prod?authSource=admin
      - ENVIRONMENT=production
      - DEBUG=False
      - WORKERS=4
    volumes:
      - ./logs:/app/logs # Garanta que o diretório ./logs exista e tenha permissões de escrita
      # - ./uploads:/app/uploads # Se houver um diretório de uploads, mapeie-o similarmente
    depends_on:
      - mongo
    networks:
      - habitus-network-prod
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      restart_policy:
        condition: on-failure
        max_attempts: 3
        window: 120s
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "4"]

  # Serviço de banco de dados MongoDB (Produção)
  mongo:
    image: mongo:6
    container_name: habitus-forecast-mongo-prod # Mantido pois não usa deploy.replicas
    restart: always
    env_file:
      - .env.prod
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=habitus-prod
    volumes:
      - mongo-data-prod:/data/db
      - mongo-config-prod:/data/configdb
      - ./mongo-init.prod.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
      - ./backups:/backups # Usado pelo serviço de backup e para restauração manual
    expose:
      - 27017
    networks:
      - habitus-network-prod
    deploy: # Bloco deploy pode existir sem replicas para outras configs (ex: resources)
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
    command: ["--auth", "--bind_ip_all", "--wiredTigerCacheSizeGB", "1.5"]
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "5"

  # Serviço de frontend React (Produção)
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile.client
      args:
        - REACT_APP_API_URL=https://api.habitus-forecast.com/api/v1 # Ajuste conforme seu domínio
        - NODE_ENV=production
    image: habitus-forecast-frontend-prod
    # container_name: habitus-forecast-frontend-prod # Removido para consistência com deploy
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./ssl:/etc/nginx/ssl:ro
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro # Caminho corrigido para nginx.conf
    depends_on:
      - api
    networks:
      - habitus-network-prod
    deploy: # Bloco deploy pode existir sem replicas
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Serviço de backup automático
  backup:
    image: mongo:6
    container_name: habitus-forecast-backup # Mantido pois não usa deploy.replicas
    restart: always
    env_file:
      - .env.prod
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/usr/local/bin/backup.sh:ro # Script de backup
      # Montar o socket do Docker se o script de backup precisar interagir com o Docker
      # - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - habitus-network-prod
    depends_on:
      - mongo
    # O entrypoint e command originais são para crond.
    # Se backup.sh tiver sua própria lógica de agendamento ou for executado via cron no host,
    # esta configuração pode ser simplificada.
    # Para executar o cron dentro do container:
    entrypoint: /bin/bash -c "chmod +x /usr/local/bin/backup.sh && echo '0 0 * * * /usr/local/bin/backup.sh >> /backups/cron.log 2>&1' > /etc/crontabs/root && crond -f -L /dev/stdout"
    # Removido o command original, pois o entrypoint agora lida com o crond.
    environment:
      - MONGO_HOST=mongo
      - MONGO_PORT=27017
      - MONGO_DATABASE=habitus-prod
      - MONGO_USER=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - BACKUP_DIR=/backups

volumes:
  mongo-data-prod:
    name: habitus-mongo-data-prod
  mongo-config-prod:
    name: habitus-mongo-config-prod

networks:
  habitus-network-prod:
    driver: bridge 