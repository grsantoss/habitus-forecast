user nginx;
worker_processes auto;
pid /var/run/nginx.pid;

# Mova limit_req_zone para o contexto http, fora de qualquer server block.
# Exemplo: 10m = 160000 estados (64 bits) ou 80000 (32 bits)
# rate=1r/s significa 1 requisição por segundo. Ajuste conforme necessário.
limit_req_zone $binary_remote_addr zone=mylimit:10m rate=5r/s;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off; # Oculta a versão do Nginx

    # gzip on;
    # gzip_disable "msie6";
    # gzip_vary on;
    # gzip_proxied any;
    # gzip_comp_level 6;
    # gzip_buffers 16 8k;
    # gzip_http_version 1.1;
    # gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Configurações de segurança adicionais
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    # add_header X-Frame-Options SAMEORIGIN always; # Pode quebrar se você usar iframes de outros domínios
    # add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self' data:; connect-src 'self' https://api.seu-dominio.com/api/v1" always;
    # add_header Referrer-Policy strict-origin-when-cross-origin always;

    server {
        listen 80;
        server_name seu-dominio.com www.seu-dominio.com; # Substitua pelo seu domínio

        # Limitar requisições para este server block
        limit_req zone=mylimit burst=10 nodelay;

        # Redireciona todo tráfego HTTP para HTTPS
        location / {
            return 301 https://$host$request_uri;
        }
    }

    server {
        listen 443 ssl http2;
        server_name seu-dominio.com www.seu-dominio.com; # Substitua pelo seu domínio

        # Limitar requisições para este server block (opcional, já que está no http block)
        # limit_req zone=mylimit burst=10 nodelay;

        # Configurações SSL
        ssl_certificate /etc/nginx/ssl/fullchain.pem;
        ssl_certificate_key /etc/nginx/ssl/privkey.pem;
        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:50m;
        ssl_session_tickets off;

        # Protocolos e Ciphers (exemplo moderno, verifique compatibilidade)
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers off;
        # ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';

        # HSTS (Strict Transport Security) - descomente após confirmar que HTTPS funciona bem
        # add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;

        # Localização para servir o frontend React
        location / {
            root /usr/share/nginx/html;
            try_files $uri /index.html; # Para roteamento do lado do cliente React
            add_header Cache-Control "no-store, no-cache, must-revalidate";
        }

        # Localização para a API (Proxy Reverso)
        location /api/ {
            # Aplicar limite de requisições especificamente para /api/ se necessário
            # limit_req zone=mylimit burst=20 nodelay;

            proxy_pass http://api:8000; # Nome do serviço da API no docker-compose
            proxy_set_header Host $host; # Importante para a API saber o host original
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host; # Adicionado para melhor compatibilidade
            proxy_set_header X-Forwarded-Port $server_port; # Adicionado para melhor compatibilidade
            
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade; # Para WebSockets, se usados
            proxy_set_header Connection "upgrade";   # Para WebSockets, se usados
            
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            proxy_buffering off; # Útil para streaming de respostas
        }

        # Opcional: Melhorar logging de erros e acesso
        access_log /var/log/nginx/seu-dominio.com.access.log main;
        error_log /var/log/nginx/seu-dominio.com.error.log warn;
    }
} 